The document describes how to how to compile the SRCH2 engine on MacOS for development. You only need to run the following steps on the machine once.   

Step 1: Install Xcode

    Open the “App Store” app;

    Search for “xCode”;

    Hit the “Install” button.

Step 2: Install “Command Line Tools”

    Open xCode.

    Go to “Preferences” by hitting (command + ’,’)

    “Downloads” -> “Components” -> Install the “Command Line Tools”

Step 3: Install boost 

- Download Boost from http://sourceforge.net/projects/boost/files/boost/1.50.0/

 Any of the packages should be fine.  Let's download "boost_1_50_0.tar.gz".

 Download it to the folder ~/tmp.

 

- Go to the ~/tmp folder, extract it and go inside the folder

 ~/tmp> tar xvf boost_1_50_0.tar.gz

 

- Run these commands in a shell:


~/tmp/boost_1_50_0> ./bootstrap. sh --prefix=/usr/local

~/tmp/boost_1_50_0> ./b2

~/tmp/boost_1_50_0> sudo ./b2 install

 

Step 4: Install openssl

 

- Download openssl library http://www.openssl.org/source/openssl-1.0.1e.tar.gz 

 Put into the folder ~/tmp.

 

- Type in the following:

 

cd ~/tmp/

~/tmp/> tar xvf openssl-1.0.1e.tar.gz

~/tmp/> cd openssl-1.0.1e

~/tmp/openssl-1.0.1e/> ./config --prefix=/usr/local

~/tmp/openssl-1.0.1e/> make

~/tmp/openssl-1.0.1e/> sudo make install 

 

Step 5: Install cmake

Download http://www.cmake.org/files/v2.8/cmake-2.8.11.1-Darwin64-universal.dmg 

Install it as a Mac application.


Step 6 (optional): Remove all the downloaded files under ~/tmp

 

shell> cd ~/tmp

~/tmp> \rm -fr boost_1_50_0.tar.gz

~/tmp> \rm -fr boost_1_50

~/tmp> \rm -fr openssl-1.0.1e.tar.gz

~/tmp> \rm -fr openssl-1.0.1e

 


Setting up Debugger on eclipse on Mac:

In Mac, gcc seems to build 64-bit executables by default and Eclipse is not able to recognize them. So we need to change the "Binary Parser" to 'Mach-O 64 Parser' in Eclipse.

To change the Binary Parser, follow the steps below:

    Click on "Project" -> "Properties" -> "C/C++ Make Project". 
    On the right pane, select "Binary Parser" and then check only the "Mach-O 64 Parser". 

Now, you should be able to debug the code using the Eclipse debugger.

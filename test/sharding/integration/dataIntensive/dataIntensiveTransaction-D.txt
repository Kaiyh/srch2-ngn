#Inserting 1 record in A,B,D to test single insert API
A||start
B||start
C||start
D||start
E||start
F||start
-||sleep||10
A||bulkInsertFromBeginning||./dataIntensive/stackoverflow-1M-A.json||1||50
B||bulkInsertFromBeginning||./dataIntensive/stackoverflow-1M-B.json||1||50
C||bulkInsertFromBeginning||./dataIntensive/stackoverflow-1M-C.json||1||50
D||bulkInsertFromBeginning||./dataIntensive/stackoverflow-1M-D.json||1||50
E||bulkInsertFromBeginning||./dataIntensive/stackoverflow-1M-E.json||1||50
F||bulkInsertFromBeginning||./dataIntensive/stackoverflow-1M-F.json||1||50
A||insert||{"body": "aaaaaa 111111 zzzzzz  JSON is not really meant for serializing arbitrary Python objects.  It&#39s great for serializing  dict  objects, but the  pickle  module is really what you should be using in general.  Output from  pickle  is not really human-readable, but it should unpickle just fine.  If you insist on using JSON, you could check out the  jsonpickle  module, which is an interesting hybrid approach. \n\n  https://github.com/jsonpickle/jsonpickle  \n", "last_activity_date": "04/20/2012", "accepted_answer_id": "0", "creation_date": "04/20/2012", "votes_count": 2, "last_edit_date": "01/01/1970", "id": "6000001", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "Serializing python object instance to JSON", "parent_id": "10252010", "comment_count": 0, "score": 2, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "Brendan Wood", "owner_user_id": "126751"}||"rid":"6000001","status":true
B||insert||{"body": "aaaaaa 111111 zzzzzz  JSON is not really meant for serializing arbitrary Python objects.  It&#39s great for serializing  dict  objects, but the  pickle  module is really what you should be using in general.  Output from  pickle  is not really human-readable, but it should unpickle just fine.  If you insist on using JSON, you could check out the  jsonpickle  module, which is an interesting hybrid approach. \n\n  https://github.com/jsonpickle/jsonpickle  \n", "last_activity_date": "04/20/2012", "accepted_answer_id": "0", "creation_date": "04/20/2012", "votes_count": 2, "last_edit_date": "01/01/1970", "id": "6000002", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "Serializing python object instance to JSON", "parent_id": "10252010", "comment_count": 0, "score": 2, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "Brendan Wood", "owner_user_id": "126751"}||"rid":"6000002","status":true
D||insert||{"body": "aaaaaa 111111 zzzzzz  JSON is not really meant for serializing arbitrary Python objects.  It&#39s great for serializing  dict  objects, but the  pickle  module is really what you should be using in general.  Output from  pickle  is not really human-readable, but it should unpickle just fine.  If you insist on using JSON, you could check out the  jsonpickle  module, which is an interesting hybrid approach. \n\n  https://github.com/jsonpickle/jsonpickle  \n", "last_activity_date": "04/20/2012", "accepted_answer_id": "0", "creation_date": "04/20/2012", "votes_count": 2, "last_edit_date": "01/01/1970", "id": "6000003", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "Serializing python object instance to JSON", "parent_id": "10252010", "comment_count": 0, "score": 2, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "Brendan Wood", "owner_user_id": "126751"}||"rid":"6000003","status":true
-||sleep||20
A||numberOfRecordsInCore||0||303
B||numberOfRecordsInCore||0||303
C||numberOfRecordsInCore||0||303
D||numberOfRecordsInCore||0||303
E||numberOfRecordsInCore||0||303
F||numberOfRecordsInCore||0||303
A||kill
B||kill
C||kill
D||kill
E||kill
F||kill

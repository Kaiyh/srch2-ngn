A||start
#B||start
#C||start
A||insert||{"body": "aaaaaa 111111 zzzzzz  There are different ways to tackle it, you can use ATI commands in .Net for this purpose and use GsmComm.dll library to send message, also PDU knowledge is required, you can also see a ready made  library  its name is rapidsmsserver and can ask them how did they implement it or if they could give you some developer license free of cost so you can use it in .net and study it. I dont know much about it, and you can also see many other ready made libraries because most of ATI commands are no more working. \n", "last_activity_date": "04/20/2012", "accepted_answer_id": "0", "creation_date": "04/20/2012", "votes_count": 1, "last_edit_date": "01/01/1970", "id": "2", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "send and receive SMS and developing a SMS panel", "parent_id": "7976753", "comment_count": 0, "score": 1, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "Muhammad Atif Agha", "owner_user_id": "727794"}||"rid":"2","status":true
A||insert||{"body": "aaaaaa 111111 zzzzzz  If you don&#39t need the header, set  CURLOPT_HEADER  to  false . \n", "last_activity_date": "04/22/2012", "accepted_answer_id": "0", "creation_date": "04/22/2012", "votes_count": 4, "last_edit_date": "01/01/1970", "id": "3", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "parse XML from curl POST response", "parent_id": "10266742", "comment_count": 1, "score": 3, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "lafor", "owner_user_id": "1341059"}||"rid":"3","status":true
A||insert||{"body": "aaaaaa 111111 zzzzzz  JSON is not really meant for serializing arbitrary Python objects.  It&#39s great for serializing  dict  objects, but the  pickle  module is really what you should be using in general.  Output from  pickle  is not really human-readable, but it should unpickle just fine.  If you insist on using JSON, you could check out the  jsonpickle  module, which is an interesting hybrid approach. \n\n  https://github.com/jsonpickle/jsonpickle  \n", "last_activity_date": "04/20/2012", "accepted_answer_id": "0", "creation_date": "04/20/2012", "votes_count": 2, "last_edit_date": "01/01/1970", "id": "1", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "Serializing python object instance to JSON", "parent_id": "10252010", "comment_count": 0, "score": 2, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "Brendan Wood", "owner_user_id": "126751"}||"rid":"1","status":true
A||insert||{"body": "bbbbbb 222222 yyyyyy  You are treating the DATE_SUB function as a string. \n\n Try this instead: \n\n  SELECT * FROM (`payments`) WHERE `LastUpdated` &gt;= DATE_SUB(NOW(), INTERVAL 15 DAY)\n  \n", "last_activity_date": "04/23/2012", "accepted_answer_id": "0", "creation_date": "04/23/2012", "votes_count": 3, "last_edit_date": "01/01/1970", "id": "6", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "Comparing mysql timestamps", "parent_id": "10278468", "comment_count": 1, "score": 2, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "samjudson", "owner_user_id": "1908"}||"rid":"6","status":true
A||insert||{"body": "bbbbbb 222222 yyyyyy  If you have Firebug, you set a breakpoint here: \n\n  $(&#39#caches&#39).append($(&#39&lt;p&gt;&#39 + data[0].name + &#39&lt;/p&gt;&#39));\n  \n\n And then you inspect  data . Your debug data showed  OU0397  as the key; due to PHP&#39s  json_encode , that means you are likely given a dictionary. Dictionaries are traversed in a different manner (e.g.  for i in data \\{ ... \\} ). \n\n You could also consider changing your PHP to return only the first result; this simplifies your JavaScript and reduce network overhead (e.g. use  json_encode(current($data)) ). \n", "last_activity_date": "04/24/2012", "accepted_answer_id": "0", "creation_date": "04/24/2012", "votes_count": 1, "last_edit_date": "01/01/1970", "id": "7", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "json data object won&#39t append", "parent_id": "10290749", "comment_count": 0, "score": 1, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "Jack", "owner_user_id": "1338292"}||"rid":"7","status":true
A||insert||{"body": "bbbbbb 222222 yyyyyy  You should leave the  tableView:cellForRowAtIndexPath:  method signature intact: it should return (UITableViewCell *) and not your custom cell class. Since your  SidebarCell  is a subclass of  UITableViewCell , it should all \"just work\". No need to call  super  or any of that: \n\n  - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n\\{\n    SidebarCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"CellIdentifier\"];\n    if (cell == nil) \\{\n        cell = [[SidebarCell alloc] initWithStyle:UITableViewCellStyleDefault\n                                  reuseIdentifier:@\"CellIdentifier@\"];\n    \\}\n    // ... set up the cell here ...\n    return cell;\n\\}\n  \n\n In other methods, the cast should work just as you have it: \n\n  SidebarCell *cell = (SidebarCell *)[tableView cellForRowAtIndexPath:indexPath];\n  \n", "last_activity_date": "04/24/2012", "accepted_answer_id": "0", "creation_date": "04/24/2012", "votes_count": 2, "last_edit_date": "01/01/1970", "id": "8", "favorite_count": 0, "last_editor_display_name": "", "closed_date": "01/01/1970", "view_count": 0, "title": "Return a custom cell from cellForRowAtIndexPath:", "parent_id": "10290808", "comment_count": 1, "score": 1, "last_editor_user_id": "0", "post_type_id": "2", "community_owned_date": "01/01/1970", "tags": "", "answer_count": 0, "author_name": "gregheo", "owner_user_id": "593274"}||"rid":"8","status":true
#A||nodeCount||3
#B||nodeCount||3
#C||nodeCount||3
A||merge
A||query||q="aaa*%20OR%20bbb*"||"id":"1" "id":"2" "id":"3" "id":"6" "id":"7" "id":"8"||"results_found":6
A||query||q="%22aaaaaa%20111111%22"||"id":"1" "id":"2" "id":"3"||"results_found":3
A||kill

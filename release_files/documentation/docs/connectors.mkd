#Database Connectors

##1. Overview

The SRCH2 engine provides connectors for
[MongoDB](http://www.mongodb.org/) and
[SQLite](http://www.sqlite.org/).  Notice that a SRCH2 instance can
have multiple data sources ("cores" as described in
[here](configuration.mkd#12-cores-optional)). Each core can be a JSON
file, a MongoDB table, or a SQLite table.  Each SRCH2 connector for a
database builds indexes for the records in the table,  and
periodically checks data updates to incrementally maintain the
indexes.

A connector for a data source can make sure all the record operations
(insert/delete/update) at the source are sent to the
SRCH2 engine so that the engine can find the latest results at the
source.

##2. Search in MongoDB

This section describes how to use SRCH2 to do text search on [MongoDB](http://www.mongodb.org/).  The following figure illustrates how
a SRCH2 connector interacts with a MongoDB table.  In the configuration file of SRCH2, a user specifies a MongoDB data source with 
information such as host name, port number, and table name.  The SRCH2 engine will load the MongoDB connector (as a shared library called "libmongodbConnector"), which 
will read the records from the table, and insert the records into the SRCH2 engine.  In addition, the connector has a thread
that periodically accesses the "oplog" of MongoDB to retrieve information about the changes (insert, delete, and update).  It
will send these changes to the SRCH2 engine to modify the indexes.  The frequency of accessing the log can also be specified in the
configuration file.

<span ><center><img style="float: center" width="60%" src="../images/mongodb-connector.png" /></center></span>

###2.1. Install MongoDB

Follow the instructions at [here](http://docs.mongodb.org/manual/installation/) to install MongoDB. The following instructions
are for Ubuntu:

```
shell> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
shell> echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
shell> sudo apt-get update
shell> sudo apt-get install mongodb-org
shell> sudo service mongod stop
shell> mkdir -p ~/tmp/mongodb/db0
shell> mongod --port 27017 --dbpath ~/tmp/mongodb/db0 --replSet rs0
```

Notice that the SRCH2 engine works with a MongoDB server running with the [replication mode](http://docs.mongodb.org/manual/tutorial/convert-standalone-to-replica-set/) enabled. The MongoDB host specified in the configuration file should be the primary of the replica set.  The SRCH2 engine collects incremental inserts/deletes/updates on MongoDB from its oplog.

Use another terminal to run the following commands to initialize mongodb (needed only once):

```
shell> mongo
mongo> rs.initiate()
```

These commands will start the mongodb engine with the replication mode enabled. 

###2.2. Populate MongoDB

Download a <a href=../example-demo/movie-data.json>sample data file</a> with movie information to a local folder. Run the following MongoDB command to insert those records into a collection (table) called "movies" in a database called "demo".

```
shell> mongoimport --db demo --collection movies --type json --file movie-data.json 
```
To check if the data has been loaded, run following commands:

```
shell> mongo
mongodb> use demo
mongodb> db.movies.find().count()
```

There should be 243 movies in the "movies" collection.

###2.3. Configure SRCH2

Download a sample <a href="../example-demo/srch2-config-mongo.xml">configuration file</a> for the SRCH2 engine.  Find the following lines inside the <i>config</i> element to specify information about this MongoDB data source:
 
```
    <dataSourceType>2</dataSourceType>
    <dbParameters>
        <dbSharedLibraryPath>db_connectors/</dbSharedLibraryPath>
        <dbSharedLibraryName>libmongodbConnector</dbSharedLibraryName>
        <dbKeyValues>
            <dbKeyValue key="host" value="127.0.0.1" />
            <dbKeyValue key="port" value="27017" />
            <dbKeyValue key="db" value="demo" />
            <dbKeyValue key="collection" value="movies" />
            <dbKeyValue key="listenerWaitTime" value="3" />
        </dbKeyValues>
    </dbParameters>
```

Most parameters are self-explanatory.  The "dataSourceType" value "2" indicates that this core is
an external data source.  The "listenerWaitTime" value specifies how often (in seconds)
the SRCH2 engine checks the latest changes from the MongoDB oplog.  The MongoDB connector is implemented 
as a shared library specified by the parameters "dbSharedLibraryPath" and "dbSharedLibraryName", which is included in the package and loaded by the main SRCH2 engine.

Change the parameters if needed.  Make sure that you have also set the "srch2Home" variable in the SRCH2 configuration file. All other paths mentioned in the configuration file are relative to the "srch2Home" folder.

###2.4. Start SRCH2 Engine

Go to the install folder of SRCH2 and run the following:

```
 /home/joe/srch2/example-demo> ../bin/srch2-engine --config-file=./srch2-config-mongo.xml
```

The engine will use a MongoDB connector to read the data from the MongoDB table, build indexes, and wait for queries. It also starts a thread that periodically pulls latest changes from MongoDB (as specified by the "listenerWaitTime" parameter) and add these changes to its indexes.  

###2.5. Search

In a shell terminal, run the following command:

```
shell> curl "http://localhost:8081/search?q=terminator"
```
You should see the records with the keyword "terminator".

###2.6. Insert a Record

In the MongoDB client, run the following command to insert a new record.
```
shell> mongo
mongodb> use demo
mongodb> db.movies.find().count()
mongodb> db.movies.insert(
{
"trailer_url" : "http://www.youtube.com/watch?v=QHhZK-g7wHo",
"title" : "Terminator 3: Rise of the Machines",
"director" : "James Cameron",
"year" : NumberLong(2003),
"banner_url" : "http://ia.media-imdb.com/images/M/MV5BMTk5NzM1ODgyN15BMl5BanBnXkFtZTcwMzA5MjAzMw@@._V1_SY317_CR0,0,214,317_.jpg",
"id" : NumberLong(765006),
"genre" : "drama"
});
```

Th last command inserts a new record into MongoDB.  Wait for about 4 seconds for the SRCH2 server to pull the change. Do the above search query again. The search engine should return this newly inserted record.  Notice that the wait time depends upon your configuration such as [listenerWaitTime](configuration.mkd#63-database-required-if-datasourcetype-is-2) and [merge policy](configuration.mkd#103-merge-policy-optional).  It is suggested to wait for "listenerWaitTime + mergeEveryNSeconds" seconds.

###2.7. Update a Record

The record we inserted has a wrong director "James Cameron." The correct director is "Jonathan Mostow". To fix the error, run the following command in the MongoDB shell to update the record:
```
mongodb> db.movies.update( { id: 765006 },
{
$set: { director: "Jonathan Mostow" },
});
```

Wait for about 4 seconds for the SRCH2 server to pull the change, then do the above search query again. The SRCH2 engine should be able to return this updated record, with "Jonathan Mostow" as the <i>director</i> value.

###2.8. Delete a Record

Run the following command in the MongoDB shell to delete the updated record:
```
mongodb> db.movies.remove({"id" : 765006 });
```

Again, wait for about 4 seconds for the SRCH2 server to pull the change, then do the above search query again. The SRCH2 engine should not return the record that we just deleted.

##3. Search in SQLite

This section explains how to use SRCH2 to do text search on [SQLite](http://www.sqlite.org/).  The following diagram explains
the architecture, which is similar to the way SRCH2 interacts with MongoDB.  The main difference is that 
we use SQLite triggers to keep track of changes to a SQLite table, and add the corresponding change records to a log table.
Again, the SRCH2 engine periodically accesses this log table to retrieve the information about data changes, and updates
the indexes accordingly.

<span ><center><img style="float: center" width="60%" src="../images/sqlite-connector.png" /></center></span>

###3.1. Install SQLite

If you have not installed SQLite, follow the instructions at [here](http://www.sqlite.org/download.html) to
install it.  The following commands are for Ubuntu:

```
shell> mkdir ~/sqlite
shell> cd ~/sqlite
shell> wget http://www.sqlite.org/2014/sqlite-autoconf-3080500.tar.gz 
shell> tar xvfz sqlite-autoconf-*.tar.gz
shell> cd sqlite-autoconf-*
shell> ./configure 
shell> make
shell> sudo make install
```

###3.2. Populate a SQLite Table

Download a <a href=../example-demo/company-data.csv>sample data file</a> with company information to a local folder. Run the following SQLite command to insert those records into a table called "COMPANY" in a database called "demo".

```
shell> sqlite3 <srch2Home>/demo.db
sqlite> CREATE TABLE COMPANY(
   ID INT PRIMARY KEY NOT NULL,
   NAME TEXT NOT NULL,
   AGE INT NOT NULL,
   ADDRESS CHAR(50),
   SALARY REAL
);
sqlite> .separator ","
sqlite> .import company-data.csv COMPANY
```
To check if the data has been loaded, run following command:
```
sqlite> SELECT * FROM COMPANY;

| ID | NAME  | AGE | ADDRESS    | SALARY |
|  1 | Paul  |  32 | California |  20000 |
|  2 | Allen |  25 | Texas      |  15000 |
|  3 | Teddy |  23 | Norway     |  20000 |
|  4 | Mark  |  25 | Rich-Mond  |  65000 |
|  5 | David |  27 | Texas      |  85000 |
|  6 | Kim   |  22 | South-Hall |  45000 |
```
As shown above, there should be six records in the "COMPANY" table.

###3.3. Configure SRCH2

Download a sample <a href="../example-demo/srch2-config-sqlite.xml">configuration file</a> for the SRCH2 engine.  Find the following lines inside the <i>config</i> element to specify information about this SQLite data source:
 
```
   <dataSourceType>2</dataSourceType>
    <dbParameters>
        <dbSharedLibraryPath>db_connectors/</dbSharedLibraryPath>
        <dbSharedLibraryName>libsqliteConnector</dbSharedLibraryName>
        <dbKeyValues>
            <dbKeyValue key="db" value="demo.db" />
            <dbKeyValue key="dbPath" value="." />
            <dbKeyValue key="tableName" value="COMPANY" />
            <dbKeyValue key="listenerWaitTime" value="3" />
        </dbKeyValues>
    </dbParameters>
```

These parameters are similar to those used in the MongoDB connector.  Notice that the engine requires a shared library
called "libsqliteConnector" for SQLite, which is included in the package.  Change the parameters if needed.  Make sure that you have also set the "srch2Home" variable in the SRCH2 configuration file. All other paths mentioned in the configuration file are relative to the "srch2Home" folder.

###3.4. Start SRCH2 Engine

Go to the install folder of SRCH2 and run the following:

```
 /home/joe/srch2/example-demo> ../bin/srch2-engine --config-file=./srch2-config-sqlite.xml
```

The engine should read the data from the SQLite instance, build indexes, and wait for queries. It also starts a thread that periodically pulls latest changes from SQLite (as specified by the "listenerWaitTime" parameter) and add these changes to its search indexes.

###3.5. Search

In a terminal, run the following command:

```
shell> curl "http://localhost:8081/search?q=paul"
```
You should see a record with the keyword "Paul".

###3.6. Insert a Record

In the SQLite shell, run the following command to insert a new record.
```
shell> sqlite3 <srch2Home>/demo.db
sqlite> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (7, 'Joe', 20, 'Nevada', 15000.00 );
```

Wait for about 4 seconds for the SRCH2 server to pull the change. Do the search query:
```
shell> curl "http://localhost:8081/search?q=joe"
```
The search engine should return this newly inserted record. 

###3.7. Update a Record

We want to update Kim's address from "South-Hall" to "Texas" by running the following command:
```
sqlite> UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6;
```

Wait for about 4 seconds for the SRCH2 server to pull the change, then do the search query:
```
shell> curl "http://localhost:8081/search?q=kim"
```
The SRCH2 engine should be able to return this updated record, with "Texas" as the <i>ADDRESS</i> value.

###3.8. Delete a Record

Run the following command in the SQLite shell to delete the updated record:
```
sqlite> DELETE FROM COMPANY WHERE ID = 6;
```

Again, wait for about 4 seconds for the SRCH2 server to pull the change, then do the above search query:

```
shell> curl "http://localhost:8081/search?q=Kim"
```
The SRCH2 engine should not return the record that we just deleted.

##4. Search in MySQL

This section describes how to use SRCH2 to do text search on
[MySQL](http://www.mysql.com/).  The following figure illustrates how
a SRCH2 connector interacts with a MySQL table.  In the configuration
file of SRCH2, a user specifies a MySQL data source with information
such as host name, port number, and table name.  The SRCH2 engine will
load the MySQL connector (as a shared library called
"libmysqlConnector"), which will read the records from the table, and
insert the records into the SRCH2 engine.  In addition, the connector
is using [MySQL Replication
Listener](https://launchpad.net/mysql-replication-listener) to
retrieve information about the changes (insert, delete, and update)
from the binlog.  It will send these changes to the SRCH2 engine to
change the indexes.

<span ><center><img style="float: center" width="60%" src="../images/mysql-connector.png" /></center></span>

###4.1. Setup MySQL

####4.1.1. Follow the instructions at [here](http://dev.mysql.com/doc/refman/5.7/en/installing.html) to install MySQL:

For Ubuntu:
```
shell> sudo apt-get install mysql-server
```
For MAC OS, please follow the instructions at [here](http://dev.mysql.com/doc/refman/5.5/en/macosx-installation-pkg.html).

Notice that the [MySQL Replication
Listener](https://launchpad.net/mysql-replication-listener) works with
a MySQL server running with the [Binary
Log](http://dev.mysql.com/doc/refman/5.0/en/binary-log.html) mode
enabled. The MySQL host specified in the configuration file should be
the primary of the replica set.


####4.1.2. To enable [BinaryLog](http://dev.mysql.com/doc/refman/5.0/en/binary-log.html) (needed only once):

For MAC OS, if the file <tt>/etc/my.cnf</tt> does not exist, run the following commands:
```
shell> cd /usr/local/mysql/support-files/
shell> sudo cp my-huge.cnf /etc/my.cnf
```
For both platforms, find the following lines in the [my.cnf](http://dev.mysql.com/doc/refman/5.1/en/option-files.html) file.
```
#server-id               = 1
#log_bin                 = /var/log/mysql/mysql-bin.log
```
Change them to:

```
server-id               = 1
log_bin                 = /var/log/mysql/mysql-bin.log
binlog-format	        = ROW
```


####4.1.3. Stop/start the mysql service:

For Ubuntu:
```
shell> sudo /etc/init.d/mysql stop
shell> sudo /etc/init.d/mysql start
```
For MAC OS:
```
shell> sudo /usr/local/mysql/support-files/mysql.server stop 
shell> sudo /usr/local/mysql/support-files/mysql.server start
```
####4.1.4.Reset the row-based binlog:
```
shell> mysql -u root -p
mysql> reset master;
```

Check binlog status:
```
mysql> show variables like 'binlog_format';
mysql> show master status;
mysql> show binlog events;
```
These commands will show the status of the binlog.

###4.2. Populate MySQL

Download a <a href=../example-demo/company-data.csv>sample data file</a> with company information to a local folder. Run the following MySQL command to insert those records into a table called "COMPANY" in a database called "demo".

```
shell> mysql -u root -p
mysql> CREATE DATABASE IF NOT EXISTS demo;
mysql> USE demo;
mysql> CREATE TABLE COMPANY(
   ID INT PRIMARY KEY NOT NULL,
   NAME TEXT NOT NULL,
   AGE INT NOT NULL,
   ADDRESS CHAR(50),
   SALARY REAL
);
mysql> exit;
shell> mv company-data.csv COMPANY.csv
shell> mysqlimport -u root -p --fields-terminated-by=',' --local demo COMPANY.csv
```
To check if the data has been loaded, run following command:
```
shell> mysql -u root -p
mysql> USE demo;
mysql> SELECT * FROM COMPANY;

| ID | NAME  | AGE | ADDRESS    | SALARY |
|  1 | Paul  |  32 | California |  20000 |
|  2 | Allen |  25 | Texas      |  15000 |
|  3 | Teddy |  23 | Norway     |  20000 |
|  4 | Mark  |  25 | Rich-Mond  |  65000 |
|  5 | David |  27 | Texas      |  85000 |
|  6 | Kim   |  22 | South-Hall |  45000 |

```
As shown above, there should be six records in the "COMPANY" table.

###4.3. Configure SRCH2

Download a sample <a href="../example-demo/srch2-config-mysql.xml">configuration file</a> for the SRCH2 engine.  Find the following lines inside the <i>config</i> element to specify information about this MySQL data source:
 
```
    <dataSourceType>2</dataSourceType>
    <dbParameters>
        <dbSharedLibraryPath>db_connectors/</dbSharedLibraryPath>
        <dbSharedLibraryName>libmysqlConnector</dbSharedLibraryName>
        <dbKeyValues>
            <dbKeyValue key="host" value="127.0.0.1" />
            <dbKeyValue key="port" value="3306" />
            <dbKeyValue key="dbName" value="demo" />
            <dbKeyValue key="user" value="root" />
            <dbKeyValue key="password" value="" />
            <dbKeyValue key="tableName" value="COMPANY" />
            <dbKeyValue key="logName" value="mysql-bin" />
            <dbKeyValue key="listenerWaitTime" value="3" />
        </dbKeyValues>
    </dbParameters>
```

These parameters are similar to those used in the MongoDB connector.  Notice that the engine requires a shared library
called "libmysqlConnector" for MySQL, which is included in the package.  Change the parameters if needed.  Make sure that you have also set the "srch2Home" variable in the SRCH2 configuration file. All other paths mentioned in the configuration file are relative to the "srch2Home" folder.

###4.4. Start SRCH2 Engine

Go to the install folder of SRCH2 and run the following:

```
 /home/joe/srch2/example-demo> ../bin/srch2-engine --config-file=./srch2-config-mysql.xml
```

The engine will use a MySQL connector to read the data from the MySQL
database, build indexes, and wait for queries. It also starts a thread
that listens to the latest changes from the database by using MySQL
Replication Listener and add these changes to its indexes. 

###4.5. Search

In a terminal, run the following command:

```
shell> curl "http://localhost:8081/search?q=paul"
```
You should see a record with the keyword "Paul".

###4.6. Insert a Record

In the MySQL shell, run the following command to insert a new record.
```
shell> mysql -u root -p
mysql> USE demo;
mysql> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (7, 'Joe', 20, 'Nevada', 15000.00 );
```

Wait for about 4 seconds for the SRCH2 server to save the change. Do the search query:
```
shell> curl "http://localhost:8081/search?q=joe"
```
The search engine should return this newly inserted record. 

###4.7. Update a Record

We want to update Kim's address from "South-Hall" to "Texas" by running the following command:
```
mysql> UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6;
```

Wait for about 4 seconds for the SRCH2 server to save the change, then do the search query:
```
shell> curl "http://localhost:8081/search?q=kim"
```
The SRCH2 engine should be able to return this updated record, with "Texas" as the <i>ADDRESS</i> value.

###4.8. Delete a Record

Run the following command in the MySQL shell to delete the updated record:
```
mysql> DELETE FROM COMPANY WHERE ID = 6;
```

Again, wait for about 4 seconds for the SRCH2 server to save the change, then do the above search query:

```
shell> curl "http://localhost:8081/search?q=Kim"
```
The SRCH2 engine should not return the deleted record.


##5. Search in MS SQL Server

This section describes how to use SRCH2 to do text search on
[SQL Server](http://www.microsoft.com/en-us/server-cloud/products/sql-server/).The following figure illustrates how
a SRCH2 connector interacts with a SQL Server table.  In the configuration
file of SRCH2, a user specifies a SQL Server data source with information
such as host name, port number, and table name.  The SRCH2 engine will
load the SQL Server connector (as a shared library called
"libsqlserverConnector"), which will read the records from the table, and
insert the records into the SRCH2 engine. 

<span ><center><img style="float: center" width="60%" src="../images/sqlserver-connector.png" /></center></span>

###5.1. Setup SQL Server Driver for Linux

Follow the instructions at [here](http://msdn.microsoft.com/en-us/library/hh568451%28v=sql.110%29.aspx) to install SQL Server Driver:

Notice that Microsoft only officially support RedHat Linux and SUSE Linux, for other Linux platforms, we need to do some modification.

For Ubuntu:  

Download the <a href="../example-demo/srch2-install-sqlserver-odbc-ubuntu.sh">script</a> to automatically
get the required packages and execute the commands to setup the SQL Server Driver for Ubuntu by the following command: 
```
shell> sudo ./srch2-install-sqlserver-odbc-ubuntu.sh
```

Or you can follow the steps in section 5.1 to manually setup the Driver for Ubuntu.
####5.1.1. To install unixODBC(ODBC Driver Manager for Linux) :
```
shell> sudo apt-get remove libodbc1 unixodbc unixodbc-dev
shell> wget ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-2.3.2.tar.gz
shell> tar -xvf unixODBC-2.3.2.tar.gz
shell> cd unixODBC-2.3.2
```
Open the file <tt>configure</tt> and search for the ```LIB_VERSION="2:0:0"```, change it to ```LIB_VERSION="1:0:0"```

```
shell> ./configure --disable-gui --disable-drivers --enable-iconv --with-iconv-char-enc=UTF8 --with-iconv-ucode-enc=UTF16LE
shell> make
shell> sudo make install
```
####5.1.2. To install MS ODBC Driver 11 for SQL Server for Ubuntu:

Download the driver for ReadHat5 Linux on the website : http://www.microsoft.com/en-us/download/details.aspx?id=36437

```
shell> tar -xvf msodbcsql*.tar.gz
shell> cd msodbcsql*
shell> cd lib64
shell> ldd libmsodbcsql*
```

Find the lines that have "not found". The next step is to install these missing dependencies.
To find the libcrypto.so.6 and libssl.so.6, download and install the package libssl0.9.8.
The general approach is to enter the library name in the [Ubuntu Package Search](http://packages.ubuntu.com/) or use [Synaptic](http://www.nongnu.org/synaptic/).
Then run the following commands :
```
shell> cd /usr/lib
shell> sudo ln -s libssl.so.0.9.8 libssl.so.6
shell> sudo ln -s libcrypto.so.0.9.8 libcrypto.so.6
```
To find the libodbc.so.1, add path /usr/loacl/lib to the end of file /etc/ld.so.conf, then run the following command :
```
shell> sudo ldconfig
```
Once all the dependencies are met. Run the following command to install MS SQL Server Driver:
```
hell> sudo bash ./install.sh install --force
```
To test the installation:
```
shell> sqlcmd -S localhost
```
You should get an error message indicating a network error because there is no SQL Server instance on the local machine.

###5.2. Populate SQL Server

Log in with administrator account or run the following commands on windows to create an temp account ```srch2``` for database ```demo```:

```
sql@admin 1> CREATE LOGIN srch2 WITH PASSWORD = 'srch2'
sql@admin 2> go
sql@admin 1> CREATE DATABASE demo
sql@admin 2> go
sql@admin 1> USE demo
sql@admin 2> go
sql@admin 1> CREATE USER srch2 FOR LOGIN srch2
sql@admin 2> go
sql@admin 1> GRANT ALTER,CONTROL TO srch2
sql@admin 2> go
```

Log in with the demo account ```srch2``` on Linux machine.

Create a temp table ```COMPANY``` and enable [Change Tracking](http://msdn.microsoft.com/en-us/library/bb933875.aspx) for the database ```demo``` and table ```COMPANY```:

```
shell> sqlcmd -S address -U srch2 -P srch2
1> USE demo
2> go
1> CREATE TABLE COMPANY(ID CHAR(50) PRIMARY KEY NOT NULL, NAME CHAR(50) NOT NULL, AGE CHAR(50) NOT NULL, ADDRESS CHAR(50), SALARY CHAR(50))
2> go
1> ALTER DATABASE demo
2> SET CHANGE_TRACKING = ON
3> (CHANGE_RETENTION = 2 DAYS, AUTO_CLEANUP = ON)
4> go
1> ALTER TABLE COMPANY
2> ENABLE CHANGE_TRACKING
3> WITH (TRACK_COLUMNS_UPDATED = ON)
4> go
```

Insert sample data into the table COMPANY by the following commands:

```
1> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)VALUES (1, 'Paul', 32, 'California', 20000.00 )
2> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)VALUES (2, 'Allen', 25, 'Texas', 15000.00 )
3> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)VALUES (3, 'Teddy', 23, 'Norway', 20000.00 )
4> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 )
5> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (5, 'David', 27, 'Texas', 85000.00 )
6> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (6, 'Kim', 22, 'South-Hall', 45000.00 )
7> go
```

Later you can drop the user, table and database by commands:
```
sql@admin 1> IF EXISTS (SELECT * FROM sys.database_principals WHERE name = N'srch2') DROP USER [srch2]
sql@admin 2> go
sql@admin 1> DROP TABLE COMPANY
sql@admin 2> go
sql@admin 1> DROP DATABASE demo
sql@admin 2> go
```

To check if the data has been loaded, run following commands:
```
1> SELECT * FROM COMPANY
2> go

| ID | NAME  | AGE | ADDRESS    | SALARY |
|  1 | Paul  |  32 | California |  20000 |
|  2 | Allen |  25 | Texas      |  15000 |
|  3 | Teddy |  23 | Norway     |  20000 |
|  4 | Mark  |  25 | Rich-Mond  |  65000 |
|  5 | David |  27 | Texas      |  85000 |
|  6 | Kim   |  22 | South-Hall |  45000 |

```
As shown above, there should be six records in the "COMPANY" table.

###5.3. Configure SRCH2

Download a sample <a href="../example-demo/srch2-config-sqlserver.xml">configuration file</a> for the SRCH2 engine.  Find the following lines inside the <i>config</i> element to specify information about this SQL Server data source:
 
```
    <dataSourceType>2</dataSourceType>
    <dbParameters>
        <dbSharedLibraryPath>db_connectors/</dbSharedLibraryPath>
        <dbSharedLibraryName>libsqlserverConnector</dbSharedLibraryName>
        <dbKeyValues>
            <dbKeyValue key="dataSource" value="ODBC Driver 11 for SQL Server" />
            <dbKeyValue key="server" value="sqlserver_address" />
            <dbKeyValue key="user" value="srch2" />
            <dbKeyValue key="dbName" value="demo" />
            <dbKeyValue key="password" value="srch2" />
            <dbKeyValue key="tableName" value="COMPANY" />
            <dbKeyValue key="listenerWaitTime" value="3" />
        </dbKeyValues>
    </dbParameters>
```

These parameters are similar to those used in the MongoDB connector. 
The ```dataSource``` is the name of MS SQL Server Driver name in the file ```/usr/local/etc/odbcinst.ini```.
Notice that the engine requires a shared library
called "libsqlserverConnector" for SQL Server, which is included in the package.  Change the parameters if needed.  Make sure that you have also set the "srch2Home" variable in the SRCH2 configuration file. All other paths mentioned in the configuration file are relative to the "srch2Home" folder.

###5.4. Start SRCH2 Engine

Go to the install folder of SRCH2 and run the following:

```
 /home/joe/srch2/example-demo> ../bin/srch2-engine --config-file=./srch2-config-sqlserver.xml
```

The engine will use a SQL Server connector to read the data from the SQL Server
database, build indexes, and wait for queries. It also starts a thread
that listens to the latest changes from the database and adds these changes to its indexes. 

###5.5. Search

In a terminal, run the following command:

```
shell> curl "http://localhost:8081/search?q=paul"
```
You should see a record with the keyword "Paul".

###5.6. Insert a Record

In the SQL Server shell, run the following command to insert a new record.
```
shell> sqlcmd -S 192.168.1.16 -U srch2 -P srch2
1> USE demo
2> go
1> INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (7, 'Joe', 20, 'Nevada', 15000.00 )
2> go
```

Wait for about 4 seconds for the SRCH2 server to save the change. Do the search query:
```
shell> curl "http://localhost:8081/search?q=joe"
```
The search engine should return this newly inserted record. 

###5.7. Update a Record

We want to update Kim's address from "South-Hall" to "Texas" by running the following command:
```
1> UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6
2> go
```

Wait for about 4 seconds for the SRCH2 server to save the change, then do the search query:
```
shell> curl "http://localhost:8081/search?q=kim"
```
The SRCH2 engine should be able to return this updated record, with "Texas" as the <i>ADDRESS</i> value.

###5.8. Delete a Record

Run the following command in the SQL Server shell to delete the updated record:
```
1> DELETE FROM COMPANY WHERE ID = 6
2> go
```

Again, wait for about 4 seconds for the SRCH2 server to save the change, then do the above search query:

```
shell> curl "http://localhost:8081/search?q=Kim"
```
The SRCH2 engine should not return the deleted record.

Besides MongoDB, SQLite, MySQL and SQL Server, we are developing connectors for
other data sources.

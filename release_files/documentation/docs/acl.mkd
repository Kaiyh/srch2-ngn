
#Access Control

Many applications need to have restrictions on what information can be
accessed by what users.  To meet these requirements, SRCH2 provides
native support of access control to set restrictions on search
results.  

As shown in the following figure, SRCH2 supports two types of access
control:

<ul>
 <li> <b>Record-based</b>: a user (a.k.a. "role") can access certain records  in a core (called "resource").
 For each record, we can specify an access control list  (ACL) of
 roles who can access this record.

 <li> <b>Attribute-based</b>: a user can access certain attributes  in
 a core.  For each role,  we can specify the list of attributes the user
 can access.
</ul>

<center>
![Access Control Overview](../images/ACL-overview.png)
</center>

A simple way to do record-based access control 
is to introduce a multi-valued attribute to a resource core to
include the information about roles who can access each record.  This
approach is known to be [slow and
inefficient](http://stackoverflow.com/questions/9222835/solr-permissions-filtering-results-depending-on-access-rights),
and not acceptable for large amounts of information or very dynamic
ACL changes.  To solve this problem, SRCH2 adopts an advanced
implementation to deliver higher performance.

In this documentation we use the following example to explain how to
use SRCH2 to do access control:

<ul>
 <li> <b>product(pid, name, description, price, manufacturer,
 state)</b>: "pid" is the primary key;
</ul>

By doing access control, we can allow a user (specified as a string) to access certain
records and certain attributes in the <tt>product</tt> table.  The following
are sample records in the "product" core:

<b>product.json</b>

```json
{"pid" : "p501", "name" : "laptop", "description" : "Inspiron with Windows", "price" : 600, "manufacturer" : "Dell", "state" : "Texas"}
{"pid" : "p502", "name" : "phone", "description" : "Samsung Galaxy with Android", "price" : 350, "manufacturer" : "Samsung", "state" : "California"}
{"pid" : "p503", "name" : "phone", "description" : "iPhone 5", "price" : 500, "manufacturer" : "Apple", "state" : "California"}
```

The file is provided under the [example-demo/acl](../example-demo/acl) folder.

## 1. Record-Based

###1.1 Configuration File

In the configuration file, we want to tell the engine to use <tt>product</tt>
as the resource core and <tt>user</tt> as the role core. To specify
this relationship we use an <i>access-control</i> tag as shown below:

```
<cores>
 <core name="product">
   ...
  <access-control>
   <record-acl  datafile="record-acl-product.json" /> 
  </access-control>
 </core>

<cores>

```

Under the <i>record-acl</i> tag, there is a data file
<tt>record-acl-product.json</tt>, which includes the initial ACL
information to be loaded by the engine.  Each line includes an primary
id of the <tt>product</tt> core and an array of ids of the
<tt>user</tt> core. The following are example records:

```json
{"resourceId" : "p501" , "roleId" : ["u25", "u26"]}
{"resourceId" : "p502" , "roleId" : ["u26"]}
{"resourceId" : "p503" , "roleId" : ["u27", "u28"]}
```

For instance, the first line says that the product with the id "p501" can
be accessed by users named "u25" and "u26".  The second
line says that the product with the id "p502" can be accessed by the user
named "u26".

###1.2 Role-Based Search

To submit a query as a specific user, we need to add a "roleId=XYZ"
condition in the query, where "XYZ" is the id of the user.
For instance, consider the following query:
```json
curl -i "http://localhost:8081/product/search?q=phone&roleId=u26"
```

This query is asking for products with the keyword "phone" as
a user "u26". The engine returns product "p502"
only.  It will not return product "p503", even though it has
the keyword "phone", since it cannot be accessed by this user.
In general, the engine ignores records that cannot
be accessed by this role. Notice that the core name "product" 
is case sensitive.

###1.3 Insert Records with ACL

When we insert a record to the resource core <tt>product</tt>, we can
optionally also include ids of roles that can access this record.  For instance,
consider the following query:

```json
curl "http://localhost:8081/product/docs" -i -X PUT -d '{"pid" : "p504", ..., "roleId" : ["u26", "u28"]}'
```

The tag "roleId" is followed by an array of ids of roles that can
access this new record.  If no "roleId" is provided, then by default
no role can access this new record.

###1.4 Replace an ACL

We can modify the ACL of a product record by using a command called "aclRecordRoleReplace":

```json
curl "http://localhost:8081/product/aclRecordRoleReplace" -i -X PUT -d '{"resourceId":"p501", "roleId":["u27", "u28"]}'
```

This command will replace the existing ACL (if any) of the product
"p501" with two role ids, namely "u27" and "u28".  The old list of role ids for
this product will be deleted. We can also pass an
array of pairs of a product id and a list of role ids, e.g.:

```json
curl "http://localhost:8081/product/aclRecordRoleReplace" -i -X PUT -d '[{"resourceId": "p501", "roleId":["u27", "u28"]} , {"resourceId": "p502", "roleId":["u25"]}]'
```

###1.5 Append Roles to ACL

We can add more roles to the ACL of a product record by using a command called
"aclRecordRoleAppend":

```json
curl "http://localhost:8081/product/aclRecordRoleAppend" -i -X PUT -d
'{"resourceId":"p501", "roleId":["u25", "u28"]}'
```

This command will add "u25" and "u28" to the existing ACL of the product
"p501". If the ACL did not exist, the engine will create one.
We can also pass an array of pairs of a product id and a list of role ids, e.g.:

```json
curl "http://localhost:8081/product/aclRecordRoleAppend" -i -X PUT -d '[{"resourceId": "p501", "roleId":["u25", "u28"]} , {"resourceId": "p502", "roleId":["u27"]}]'
```

###1.6 Remove Roles from ACL

We can remove some roles from the ACL of a product record by using a command called
"aclRecordRoleDelete":

```json
curl "http://localhost:8081/product/aclRecordRoleDelete" -i -X PUT -d '{"resourceId":"p501", "roleId":["u25", "u27"]}'
```

This command will remove "u25" and "u27" from the ACL of the product
"p501". We can also pass an array of pairs of a product id and a list of role ids, e.g.:

```python
curl "http://localhost:8081/product/aclRecordRoleDelete" -i -X PUT -d '[{"resourceId": "p501", "roleId":["u25", "u27"]} , {"resourceId": "p502", "roleId":["u25"]}]'
```

## 2. Attribute-Based

The SRCH2 engine also allows developers to specify what attributes can
be accessed by a role.  Here is how it works.

<ul>
 <li> To do access control for an attribute, when we declare it
 in the configuration file, we need to add a tag
 <tt>acl="true"</tt> to this attribute.  Attributes with this tag,
 called <i>ACL-attributes</i>, by default cannot be accessed by a role,
 unless it's specified using one of the ACL commands described
 below.  Attributes without this tag are called "non-ACL" or "public"
 attributes, and they don't have access control constraints, thus can be
 accessed by all roles.

 <li> By using attribute-based ACL commands, we can explicitly allow
 or disallow a role to access some of the ACL-attributes.  

 <li> For a search query from a particular role, the conditions in the
 query can only be specified on those ACL-attributes accessible by
 this role and those non-ACL attributes.  Otherwise, the conditions
 will be ignored.
</ul>

###2.1 Configuration File

In the running example, suppose we want to do access control on the
attributes <tt>name</tt>, <tt>description</tt>, and <tt>state</tt> of
the <tt>product</tt> core.  In the configuration file, we need to add 
the tag <tt>acl="true"</tt> to these attributes:

```xml
<cores>
 ...
 <core name="product"> 
  <schema>
    <fields>
       <field name="pid" type="text"/>
       <field name="name" type="text" indexed="true" acl="true"/>
       <field name="description" type="text" indexed="true" acl="true"/>
       <field name="price" type="integer" indexed="false" required="true" refining="true"/>
       <field name="manufacturer" type="text" indexed="true" refining="true"/>
       <field name="state" type="text" refining="true" indexed="false" acl="true"/>
    </fields>
  </schema>
  ...
 </core> 
...
</cores> 
```

The other attributes without this tag are not ACL-attributes, i.e.,
they can be accessible by all roles, and we cannot do access control
on them.

We can also specify a file with initial attribute ACL information for
the <tt>product</tt> records:

```xml
 <core name="product"> 
     ...

    <access-control>
     <attribute-acl  datafile="attribute-acl-product.json" />
   </access-control>

 </core>
```

The data file <tt>attribute-acl-product.json</tt> has attribute ACL
information for roles.  For instance:

```json
{ "attributes": ["name", "description"], "roleId": ["u25"]}
{ "attributes": ["name", "state"], "roleId": ["u26", "u27"]}
```

The first line says that role "u25" can access attributes "name" and
"description", while the second line says that roles "u25" and "u27"
can access attributes "name" and "state".

###2.2 Replace Accessible Attributes

We can modify the ACL list of roles for attributes using a command called
"aclAttributeRoleReplace".  For instance:

```python
curl "http://localhost:8081/product/aclAttributeRoleReplace" -i -X PUT
-d '{"attributes": ["name", "description"], "roleId": ["u27", "u28"] }'
```

This command will replace the existing ACLs of attributes "name" and
"descriptions" with roles "u27" and "u28".

###2.3 Append Accessible Attributes

We can add more attributes accessible by a role with a command
called "aclAttributeRoleAppend". For instance:

```python
curl "http://localhost:8081/product/aclAttributeRoleAppend" -i -X PUT
-d '{"attributes": ["state"], "roleId": ["u27", "u28"]
}'
```

This command will add "state" to the list of accessible attributes
of the roles "u27" and "u28".

###2.4 Disallow Attributes

We can disallow a role from accessing attributes with a command
called "aclAttributeRoleDelete". For instance:

```python
curl "http://localhost:8081/product/aclAttributeRoleDelete" -i -X PUT
-d '{"attributes": ["description"], "roleId": ["u27", "u28"]
}'
```

This command disallows the roles "u27" and "u28" from accessing the
attribute "description".

###2.5 Search

Similar to the case of record-based access control, to submit a query
as a specific user, we need to add a "roleId=XYZ" condition in the
query, where "XYZ" is the role id.  The following is an example query
submitted as role "u26":
```python
curl -i "http://localhost:8081/product/search?q=phone&roleId=u26"
```

The engine will apply the conditions to those attributes that are
either public (i.e., non-ACL), or accessible by this role.  For
instance, suppose role "u26" has accessible attributes "name" and
"description", then the query will find records that have keyword
"phone" in attributes "pid" (public attribute), "name" (ACL attribute),
"description" (ACL), "price" (public), "manufacturer" (public), but
will ignore the attribute "state" since it cannot be accessible by
this role.

As another example, consider the following query that has a condition
that the state of each matching record has to be Texas:

```python
curl -i "http://localhost:8081/product/search?q=phone&fq=state:texas&roleId=u26"
```

Since this role does not have the access to the "state" attribute,
this condition will be ignored by the engine.

<h4>Disabling Attribute ACL</h4>

We can disable attribute-based ACL in a search by passing a flag 
"attributeAcl=off".  This flag means that the engine ignores
attribute-based ACL during the search process, but still does
attribute ACL when generating the JSON results.  That is, the engine
accesses all attributes during the search, but
does not output attributes that cannot be accessed by this role.  Here
is an example:

```python
curl -i "http://localhost:8081/product/search?q=phone&fq=state:texas&roleId=u26&attributeAcl=off"
```

For this query, the engine will ignore the attribute ACL for role
"u26" during the search, i.e., the engine will access all available
attributes.  When generating results, the engine will not output
attributes that cannot be accessed by this role "u26".

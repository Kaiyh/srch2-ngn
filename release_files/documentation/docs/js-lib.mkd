#SRCH2 Javascript Library (```src2lib.js```)

##1.1. Overview

SRCH2 provides a javascript library to help programmers develop an
interactive, user-friendly UI easily.
The library talks to the SRCH2 server using its 
[RESTful API](restful-search.mkd#restful-api-search) and
the [jsonp](http://en.wikipedia.org/wiki/JSONP) communication
technique. We will use the sample [movie
demo](http://demo.srch2.com/movies/) to explain how to use the
library.

The following figure illustrates the files used in the demo, and
steps the frontend follows to communicate with the server using the library.

 - [index.html](../example-demo/basic/index.html): main HTML page;
 - [index.js](../example-demo/basic/index.js): javascript file used by ```index.html```;
 - [srch2lib.js](../example-demo/basic/srch2lib.js): SRCH2 javascript library to talk to the server.

<span><center><img style="float: center" width="100%" src="../images/javascript-library.png"/></center></span>

The first time the movie demo page is loaded, it calls the function
```srch2lib.init()``` to  initialize the library.  After that, the
frontend communicates with the server in the following steps:

 1. <b>Bind Event</b>: Bind the ```keyup``` event on the
   input box using the ```bindInput()``` function so that each
   keystroke in the box can trigger a function call.

 2. <b>Call ```srch2.sendQuery()```</b>: For each event, the function
   calls ```srch2.srch2Query()``` provided by the
   library, and passes a callback function ```responseHandler()``` for
   the response.

 3. <b>Send Restful Query</b>: The library sends a query to the SRCH2
   server.

 4. <b>Receive Response</b>: The client receives the response from
   the server.

 5. <b>Call ```responseHandler```</b>: The library invokes the callback
   function ```responseHandler``` to process the response.

 6. <b>Display Results</b>: The function uses the results in the
   response and update the interface.

TOMOVE
In the ```inputEvent()``` function, first we set
   the required parameters(e.g. setServerUrl(url)). Then call the
   ```srch2lib.sendQuery(keyword, responseHandler)``` function to
   prepare and send the query to the SRCH2 server. The second
   parameter is the callback function which will handle the response
   from the SRCH2 server.

 Send RESTful query: The srch2lib will make a query based on the
   previous setting and send the query to the SRCH2 server by using
   jsonp.

 - <b>4. Get Server Response</b>: When the server returns the response, the
   function ```responseHandler()``` is called to process the results.
   It consumes the data in the response and updates the user interface.

##1.2. Basic Movie Demo

We explain how the library is used in the [basic movie
demo](../example-demo/basic/index.html). 


The following code is a basic example to use the SRCH2 Javascript
library. It binds the input box "input_box" with event "key up" which
will send the query to the engine. And the ```responseHandler``` will
print the response in the "resultContainer" in JSON format. 


```
client = {
    init : function() {
        /*
         * Initialize the srch2lib, serverUrl must be set.
         */ 
        var config = {
            serverUrl : "http://127.0.0.1:8081/",
            debug : true, // enable the debug mode which will display the debug msg to the console. 
                            //IE may not have "console.log" function. If you are using IE, please set it to false.
        };
        srch2lib.init(config);  //Initialize the srch2lib with config.
        srch2lib.setSearchType("getAll");   //Set the search type to "getAll"
        srch2lib.setEnablePrefixSearch(true);   //Enable the prefix search 
        srch2lib.setEnableFuzzySearch(true);    //Enable the fuzzy search
        this.bindInput();
    },
    /*
     * Bind the input box "query_box" key up event with 
     * a function which sending the query to the server. 
     */
    bindInput : function() {
        var element = document.getElementById("query_box");
        element.addEventListener("keyup", function(event) {
            srch2lib.sendQuery(document.getElementById("query_box").value, client.responseHandler);
        }, false);
    },
    /*
     * "responseHandler" is called by the server response.
     * The "responseText" contains all the results in JSON format. 
     */
    responseHandler : function(responseText) {
        if (responseText) {
            var output = "";
            var results = responseText.results;
            output += "<table width='450px'>";
            output += "<tr>";
            output += "<td style='border-bottom:thick;font-weight:bold;'>" + 'Title' + "</td>";
            output += "<td style='border-bottom:thick;font-weight:bold;'>" + 'Genre' + "</td>";
            output += "<td style='border-bottom:thick;font-weight:bold;'>" + 'Director' + "</td>";
            output += "<td style='border-bottom:thick;font-weight:bold;'>" + 'Year' + "</td>";
            output += "</tr>";
            client.queryKeywords = responseText.query_keywords;
            for (var i = 0; i < results.length; i++) {
                output += "<tr class='result_row'>";
                var record = results[i].record;
                var prefix = results[i].matching_prefix;
                //Find the prefix in the records to highlight it. 
                output += "<td style='border-bottom:thin dotted'>" + client.addHighlighting(prefix, record.title) + "</td>";
                output += "<td style='border-bottom:thin dotted '>" + client.addHighlighting(prefix, record.genre) + "</td>";
                output += "<td style='border-bottom:thin dotted '>" + client.addHighlighting(prefix, record.director) + "</td>";
                output += "<td style='border-bottom:thin dotted '>" + client.addHighlighting(prefix, record.year) + "</td>";
                output += "</tr>";
            }
            output += "</table>";
            client.log("got it", "debug");
            client.log(JSON.stringify(responseText), "debug");
            var element = document.getElementById("resultContainer");
            if (output == "") {
                element.innerHTML = "No results mate!";
            } else {
                element.innerHTML = output;
            }
        } else {
            var element = document.getElementById("resultContainer");
            element.innerHTML = "No results mate!";
            client.log("empty response", "debug");
        }
    },    
}
```
There are 3 basic steps to send a query to the server and get the results from it.  

1. Initialize the src2lib.  
For example, set the serverUrl, set enable the 
debug mode, etc. One way to Initialize the srch2lib is to use a config object which contains 
the key value pairs of the parameters. The other way is to call the "setter" function 
such as "setSearchType", "setEnableFuzzySearch" and "setServerUrl". 
To use the library, the ```serverUrl``` is required.  

2. Send query.  
A general way to send query is to call the function 
"srch2lib.sendQuery(keyword, responseHandler)", the "keyword" is the string keyword to 
be searched and the "responseHandler" is the function handling the response (JSON Object).  

3. Get response.  
The response is caught by "responseHandler". User must define their own "responseHandler" 
function to display or analysis the response.  

For more example, please see the "movie basic demo" and "movie advanced demo" under the <i>example-demo</i> folder. 
The advanced demo has more features like "sorting", "filter" and "facet".

###1.3. Advanced Movie demo

This section shows how to set the advanced parameters using SRCH2 Javascript library.

Here is the advanced UI for the movie demo:

<span ><center><img style="float: center" width="100%" src="../images/Srch2-FullDemoFront.png" /></center></span>

The screen has the following regions:

####1.3.1. Main search box  
```
//Get the keywords from the "query_box" and send the query to the server.
var keyword = document.getElementById('query_box').value;
srch2lib.sendQuery(keyword, this.responseHandler);
```
####1.3.2. Search results.  
This area will show the search results.

####1.3.3. Sorting option using the "year" field.  
```
//Get the order value from webpage and set it in the srch2lib.
var orderRadios = document.getElementsByName('sort_filter_order');
var setSort = false;
for (var j = 0; j < orderRadios.length; j++) {
    if (orderRadios[j].checked) {
        var value = orderRadios[j].value;
        if (value == 'asc') {
            setSort = true;
        } else if (value == 'desc') {
            setSort = true;
        }
    }
}
srch2lib.setSortList(['year']);
srch2lib.setOrderBy(value);
```

####1.3.4. Filter option to post-process results, e.g., "year in the interval [2001, 2004]".
```
/*
 * Get the filter info from webpage, generate a query and set it in the srch2lib.
 * For the syntax of filter query, please refer to : 
 * http://srch2.com/releases/4.4.2/docs/restful-search/#62-fq-filter-query-parameter
 */
 
 //Get and set the filter value
var filterQuery = "";
var filterQueryIsthere = 0;
var fqAssField = document.getElementById('filter_assignment_field').value;


var fqAssValue = document.getElementById('filter_assignment_value').value;
var fqAss = "";
if (!(fqAssField == "" || fqAssValue == "")) {
    filterQueryIsthere += 1;
    fqAss = fqAssField + ':' + fqAssValue;
}

//Get and set the filter range field
var fqRngField = document.getElementById('filter_range_field').value;
var fqRngStart = document.getElementById('filter_range_start').value;
var fqRngEnd = document.getElementById('filter_range_end').value;
var fqRng = "";
if (!(fqRngField == "" || fqRngStart == "" || fqRngEnd == "")) {
    filterQueryIsthere += 1;
    fqRng = fqRngField + ':[ ' + fqRngStart + ' TO ' + fqRngEnd + ' ]';
}


 //Get and set the boolean expressions
var fqComplex = document.getElementById('filter_complex').value;
var fqCmp = "";
if (fqComplex != null && fqComplex != "" ) {
    filterQueryIsthere += 1;
    fqCmp = "boolexp$" + fqComplex + "$";
}
var op = "";
if (filterQueryIsthere == 1) {
    filterQuery += fqAss + fqRng + fqCmp;
} else if (filterQueryIsthere > 1) {

    var opRadios = document.getElementsByName('filter_op');
    for (var i = 0; opRadios.length; i++) {
        if (opRadios[i].checked) {
            op = opRadios[i].value;
            break;
        }
    }
    if (fqAss == "") {
        filterQuery += fqRng + " " + op + " " + fqCmp;
    } else if (fqRng == "") {
        filterQuery += fqAss + " " + op + " " + fqCmp;
    } else if (fqCmp == "") {
        filterQuery += fqAss + " " + op + " " + fqRng;
    } else {
        filterQuery += fqAss + " " + op + " " + fqRng + " " + op + " " + fqCmp;
    }
}

//Append more filters if function is called by click facet category event.
if ("fq" in params) {
    var fqObj = params['fq'];
    var fqStr = fqObj['field'] + ":[ " + fqObj['valueLeft'] + " TO " + fqObj['valueRight'] + " ]";
    if (fqObj['valueLeft'] != fqObj['valueRight']) {
        fqStr += " AND -" + fqObj['field'] + ":" + fqObj['valueRight'];
    }
    if (localStorage.getItem('facetFilter') != "NULL") {
        fqStr += " AND " + localStorage.getItem('facetFilter');
    }
    if (filterQueryIsthere > 0) {
        filterQuery += " " + op + " " + fqStr;
    } else {
        filterQuery += fqStr;
        isFqSet = true;
    }
    localStorage.setItem('facetFilter', fqStr);
} else if (localStorage.getItem('facetFilter') != "NULL") {
    var fqStr = localStorage.getItem('facetFilter');
    if (filterQueryIsthere > 0) {
        filterQuery += " " + op + " " + fqStr;
    } else {
        filterQuery += fqStr;
        isFqSet = true;
    }
}

//Set the filterQuery to srch2lib
srch2lib.setFilterQueryParam(filterQuery);
```
####1.3.5. Facet option on the year field by providing a start year, an end year, and a year gap;
```
//Get the facet range values from webpage and set it in the srch2lib.
var start = document.getElementById('facet_year_start').value;
var end = document.getElementById('facet_year_end').value;
var gap = document.getElementById('facet_year_gap').value;
srch2lib.setFacetRange("year", start, end, gap);
```

####1.3.6. Facet results.
This area will show the facet results.

###1.4. SRCH2 Javascript library API
```
//Initialize the SRCH2 library with config object, if no config, the library will use the default config.
init : function(config)	

//If debug mode is enabled, log message will be printed in the console.
setEnableDebugMode : function(enableDebugMode)

//Send query with pre-setted parameters and return the response json to the callback function "responseHandler"
sendQuery : function(keyword, responseHandler)

//Set Server Url. For example : http://localhost:8087/
setServerUrl : function(serverUrl)

/*
 * A field that is labeled as "searchable" or "indexed" can be searched.
 * For example, suppose the data contains two fields, title and year. 
 * To find the records with "star" and "wars" in the "title" field, 
 * we can use the following query:
 *  title:star AND wars
 */
setSearchFields : function(searchFields)

/*
 * To enable prefix search for each term
 */
setEnablePrefixSearch : function(isEnablePrefixSearch)

/*
 * To enable fuzzy search for each term. Fuzzy similarity can 
 * be set in the second parameter.
 */
setEnableFuzzySearch : function(isEnableFuzzySearch, fuzzySimilarityThreshold)

/*
 * This parameter is used to specify a filter restricting the set of records returned.
 * For more information, please visit: 
 * http://srch2.com/releases/4.4.2/docs/restful-search/#62-fq-filter-query-parameter
 */
setFilterQueryParam : function(filterQuery)

/*
 * This parameter in a query is used to specify fields or attributes 
 * that the user wants the engine to return for this query.
 * The type of "fieldList" must be list. 
 */
setFieldList : function(fieldList)

/*
 * This value is "true", "false" or "only", indicating whether we want to enable faceting. 
 */
enableFacetParam : function(facetType)

/*
 * This parameter specifies a field to be treated as a categorical facet. 
 * It finds the number of distinct values in the specified field and returns 
 * the number of records that match each value. This parameter can be 
 * specified with multiple value in a list to indicate multiple facet fields.
 * The type of "facetFieldList" must be list. 
 */
setFacetFieldList : function(facetFieldList)

/*
 * This is the maximum number of categories with maximal 
 * frequencies to be returned. All categories are returned 
 * by default. Example: adding the following parameter to 
 * the query will tell the engine to return the top 10 most 
 * popular genres.
 * 
 * f.genre.rows=10
 */
setFacetCategoryRows : function(category, rows)

/*
 * This parameter can be used to specify a field that should be treated as a range facet.
 * For detail info, please visit:
 * http://srch2.com/releases/4.4.2/docs/restful-search/#73-facet-by-range
 */
setFacetRange : function(category, start, end, gap)

/*
 * The engine offers two different strategies for searching records:
 * topK: The results will be sorted descending by their score. 
 *  This score is calculated for each record. This approach has a 
 *  high performance, but does not support facet and sort operations. 
 * getAll: Use this strategy if facets and sort query parameters are needed.
 */
setSearchType : function(searchType)

/*
 * The engine's default behavior is to sort the results using a 
 * descending order by the overall score of each record. 
 * The user can specify sorting by other fields. For example:
 * sort=director,year,title
 * The type of "categoryList" must be list. 
 */
setSortList : function(categoryList)

/*
 * It specifies the order in which the result set should be sorted. 
 * Its default value is "desc" (descending). This order is valid 
 * for all the fields specified in the sort parameter.
 */
setOrderBy : function(orderBy)

/*
 * It is the offset in the complete result set of the query, 
 * where the set of returned records should begin.
 */
setStart : function(start)

/*
 * It indicates the number of records to return from the 
 * complete result set.
 */
setRows : function(rows)

/*
 * The "Cores" tag set in the configuration file allows the user to 
 * search on multiple "cores" within the same server. A query can 
 * specify a particular core. For instance, the following query:
 * http://localhost:8081/example-core/search?q=term
 * If a user wants to get results from all the cores, the query 
 * should add a prefix "/_all/search" to the request. 
 * For instance, the following query:
 * http://localhost:8081/_all/search?q=martn~
 *
 * For more information, please visit : 
 * http://srch2.com/releases/4.4.2/docs/restful-search/#14-multi-core
 */
setSearchCore : function(coreName)

/*
 * When record-based access control or attribute-based access control is 
 * enabled in the config file, the role-id can be specified using roleId parameter.
 */
setRoleId : function(roleId)

//Set all Params to null
clearAllParams : function()
```


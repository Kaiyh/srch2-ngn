<div id="content" > <!-- Table of content, id=content-->
<table><tbody><tr><td>
<div><h3><a style="text-decoration: none;color:#ee2e24" href="#doc">Content</a></h3></div>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#system-status">1. Retrieving System Status</a><br><br>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#serialize-indexes">2. Serializing Indexes to Disk</a><br><br>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#serialize-records">3. Serializing Records to Disk</a><br><br>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#reset-log">4. Resetting Log File</a><br><br>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#shutdown">5. Shutdown</a><br><br>


</td></tr></tbody></table>

</div> <!-- Table of content, id=content-->

<!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-MQK794"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MQK794');</script>
<!-- End Google Tag Manager -->

</div> <!-- Sidebar -->

</td>

<td id="docBody" style="width:70%">
</br>
<div><table><tbody><tr><td>
<div><h3><a style="text-decoration: none;color:#ee2e24" href="#doc"></a></h3></div>

</td></tr></tbody></table></div>
#<center>SRCH2 Manual: RESTful API - Control</center>#{id="doc" style="color:#ee2e24" }

The SRCH2 engine supports certain control messages through its RESTful API.

Note that each RESTful request needs to use a proper [URL encoder](http://www.w3schools.com/tags/ref_urlencode.asp) to be converted to characters in a format that can be transmitted properly.

##1. Retrieving System Status## {id="system-status"}

This API returns the information about the system status. The response body will contain a JSON map with these fields:

   -   "search_requests": the number of queries received by the server so far;
   -   "write_requests": number of insert/delete/update requests received by the server so far;
   -   "docs_in_index": number of documents in the indexes;
   -   "last_merge": last time (UTC time) the inserted/deleted/updated documents are merged into the indexes;
   -   "last_merge_time": the time spent to merge the inserted/deleted documents into the indexes;
   -   "version": version of this engine.

Here is an example query: 
```
$ curl -i "http://localhost:8081/info"
```

Here is an example response:

```
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 138
Date: Thu, 19 Sep 2013 18:52:52 GMT

{"engine_status":{"search_requests":"0","write_requests":"100","docs_in_index":"100","last_merge":"02/10/14 23:11:21","last_merge_time":"0","doc_count":"100"}, "version":"4.2.0"}
```

##2. Serializing Indexes to Disk##{id="serialize-indexes"}

This API serializes the indexes, with all the changes made so far, to files in the path specified by the parameter "dataDir" in the [configuration file](example-demo/srch2-config.xml). Here is an example: 
```python
$ curl -i "http://localhost:8081/save" -X PUT
```

##3. Serializing Records to Disk##{id="serialize-records"}

This API serializes the records, with all the changes made so far, to a file in the path specified by the parameter "dataDir" in the configuration file. Deleted records will be ignored. The request can specify the file name as well, using a variable called "exported_data_file". Here is an example: 

```
$ curl -i "http://localhost:8081/export?exported_data_file=mydata.json" -X PUT
```

The engine will store the records in the file "mydata.json" in the folder specified by the parameter "dataDir".

##4. Reseting Log File##{id="reset-log"}



This API is used by a third-party tool such as
[logrotate](http://linuxcommand.org/man_pages/logrotate8.html) to manage the log file. Suppose the "logrotate" tool has renamed the log file "srch2-log.txt" to another file "srch2-log.txt.1".
The tool also has re-created a file with the original name "srch2-log.txt".  The SRCH2 engine is still writing log messages to the file "srch2-log.txt.1".
Now "logrotate" sends the following message:

```
$ curl -i "http://localhost:8081/resetLogger" -X PUT
```

It tells the SRCH2 engine to reset its log-file handle to continue using the original file name  "srch2-log.txt". In this way, the old log messages have been moved to the file ""srch2-log.txt.1", which can be managed by the "logrotate" tool. Here is an example configuration file for "lograte":

```
"/home/joe/srch2/logs/srch2-log.txt" {
    weekly
    missingok
    rotate 52
    notifempty
    sharedscripts
    postrotate
            curl -i "http://localhost:8081/resetLogger" -X PUT
    endscript
    prerotate
    endscript
}
```

##5. Shutdown the server {id="shutdown"}

The client can send the shutdown message to kill the server. The request should be sent to "/_all/shutdown" path by "PUT" method.

Here is an example query: 
```
$ curl -i "http://localhost:8081/_all/shutdown" -X PUT
```



<div id="content" > <!-- Table of content, id=content-->
<table><tbody><tr><td>
<div><h3><a style="text-decoration: none;color:#ee2e24" href="#doc">Content</a></h3></div>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#insert">1. Insert</a><br><br>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#delete">2. Delete</a><br><br>
&nbsp;&nbsp;&nbsp;<a style="text-decoration: none;color:#3366FF" href="#update">3. Update</a><br><br>

</td></tr></tbody></table>

</div> <!-- Table of content, id=content-->
</div> <!-- Sidebar -->

</td>

<td id="docBody" style="width:70%">
</br>
<div><table><tbody><tr><td>
<div><h3><a style="text-decoration: none;color:#ee2e24" href="#doc"></a></h3></div>

</td></tr></tbody></table></div>

#<center>SRCH2 Manual: RESTful API - Insert/Delete/Update</center>#{id="doc" style="color:#ee2e24" }
######<center>Version: 4.2.0, Date: November 27, 2013</center>{id="versionInfo" style="font-size: 12px; margin-top: -20px;"}

Using the RESTful API of the SRCH2 engine, a user can send requests to insert new records, delete existing records, and update existing records.  The engine has a background thread that periodically merges the inserted/deleted/updated records into the indexes, based on two parameters specified in the configuration file, namely "mergeEveryNSeconds" (time interval) and "mergeEveryMWrites" (number of write requests) .

Note that each RESTful request needs to use a proper [URL encoder](http://www.w3schools.com/tags/ref_urlencode.asp) to be converted to characters in a format that can be transmitted properly.

##1. Insert## {id="insert"}

This request adds a record or a list of records to the indexes. The request body should contain a single JSON object or an array of JSON objects, which should meet the following requirements:

 - The JSON object should include a record identifier (e.g., "id"), which should be a non-empty string no longer than 1024 bytes;
 - The JSON object should include searchable fields defined in the [configuration file](example-demo/srch2-config.xml) and their corresponding values;
 - If the engine is doing geo indexing, the JSON object should include a location specified by a latitude and a longitude;
 - The sum of the length of each field value cannot be greater than 100 kilobytes.

Here are two examples:

```python
$ curl "http://localhost:8081/docs" -i -X PUT -d '{"id" : "1234", "name" : "Toy Story", "category" : "shop"}'
$ curl "http://localhost:8081/docs" -i -X PUT -d '[{"id" : "1234", "name" : "Toy Story", "category" : "shop"},{"id" : "5678", "name" : "Toy Story II", "category" : "shop"}]'
```

##2. Delete## {id="delete"}

This request deletes a record from the indexes. It needs to provide the "id" of the record to be deleted. For clients that do not support body in DELETE requests, the "id" can be sent in the query string one time per record.

Here is an example: 
```python
$ curl "http://localhost:8081/docs?id=1234" -i -X DELETE
```

The following single 'curl' command can delete multiple records since it issues multiple requests to the server:
```python
$ curl "http://localhost:8081/docs?id={1234,5678}" -i -X DELETE
```

##3. Update## {id="update"}

This request updates a record or an array of records in the indexes.  For each record in the request,
if the id is already in the index, the record will be updated. Otherwise, the record will be inserted.  In other words, the engine is doing the ["upsert" logic](http://en.wikipedia.org/wiki/Merge_(SQL)).

The request body should contain a JSON object or an array of JSON objects, which should meet the following requirements:

 - The JSON object should include a record identifier (e.g., "id"), which should be a non-empty string no longer than 1024 bytes;
 - The JSON object should include searchable fields defined in the [configuration file](example-demo/srch2-config.xml) and their corresponding values;
 - If the engine is doing geo indexing, the JSON object should include a location specified by a latitude and a longitude;
 - The sum of the length of all the records cannot be greater than 100 kilobytes;

Here are two examples: 

```python
$ curl "http://localhost:8081/update" -i -X PUT -d '{"id":"123","name":"Brave", "category":"shop"}'
$ curl "http://localhost:8081/update" -i -X PUT -d '[{"id":"123","name":"Brave", "category":"shop"},{"id":"456","name":"Tom", "category":"shop"}]'
```

Internally the engine implements the update of each record by first deleting the old record, then inserting the new record.

